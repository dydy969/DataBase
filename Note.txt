테이블, Table, TB
DB 내에서 실제 데이터를 관리, 저장하는 단위(객체)
표 형식으로 가짐
행(row), 열(column) 로 이루어짐
(행 : 가로줄, 열 : 세로줄)
데이터는 행단위로 처리한다
테이블은 소유자(Owner)를 가지고 있다
Owner - 해당 객체를 생성한 사용자 계정
ex) scott.dept 	->	 scott계정으로 생성한 dept 테이블
소유자는 자신의 테이블에 대한 모든 권한을 가지고 있다
테이블에 대한 관리 권한을 다른 계정에 부여하면 해당 테이블에 대한 관리가 가능하다
DBA계정(DataBase Administrator, 관리자 계정) 은 권한에 상관없이 소유자에 상관없이 모든 객체(테이블)를 관리 할 수있다
오라클의 기본 DBA계정 :  SYS, SYSTEM

SQL, Structured Query Language
구조적 질의 언어
데이터베이스의 자료에 대한 검색(조회), 관리, DB생성, DB수정, DBMS객체 관리 등을 수행할 수 있는 언어
주로 CRUD 작업을 수행한다
(Create, Read, Update, Delete)
스크립트 언어 : 명령어 문장을 읽으면서 곧바로 동작하는 언어

오라클 참고자료 :  http://www.gurubee.net/roadmap/oracle



SQL의 용도에 따른 분류
1. DML, Data Manipulation Language
데이터 조작어	
테이블의 데이터를 조작(CRUD, 조회,삽입,변경,삭제)하는 명령어
데이터를 처리할 때 사용하는 SQL
SELECT, INSERT, UPDATE, DELETE

2. DDL, Data Definition Language
데이터 정의어	
데이터베이스의 구조를 정의, 조작하는 SQL
CREATE, ALTER, DROP
조회(Read)에 해당하는 구문은 없고
데이터사전을 SELECT하여 만들어진(변경된) 구조를 확인해야 한다
데이터사전, 자료사전, Data Dictionary :  데이터베이스의 정보를 기록해둔 특수한 테이블  데이터베이스의 주로에 대한 정보를 기록한다
 DDL이 수행될 때마다 DBMS가 알아서 알맞은   데이터 사전에 반영한다

스키마, Schema
데이터베이스의 구조
메타 데이터, metadata
자료에 대한 특성을 설명하는 데이터
데이터에 대한 구조를 설명할 때 주로 사용되는 용어

3. DCL, Data Control Language
데이터 제어어
보안성, 데이터의 무결성, 병행 작업, 수행 제어 등을 정의하는 SQL
데이터베이스 관리자가 DB를 관리하는 목적으로 사용한다
권한 관련 명령어 - GRANT, REVOKE
트랜잭션 관련 명령어 - COMMIT, ROLLBACK
 (DML과 관련있는 명령어)

		

SELECT 구문 - DML
테이블에 저장된 데이터를 조회할때 사용하는 명령어
반드시 FROM전이 뒤에 따라 와야 함

구문 형식
SELECT * FROM tablename;
테이블의 모든 클럽을 이용해 전체 데이터 (행)을 조회한다
SELECT col1, col2,..... FROM tablename;
지정한 컬럼만 조회한다
SELECT  col1 AS "사번" 별칭을 적용하여 적용
SELECT col1, alias1, col2 alias2, …… FROM tablename;
AS키워드를 생략하고 띄어쓰기만 잘 구분하면 별칭이 된다

FROM 절
조회 대상을 지정하는 절
테이블 TABLE
뷰 VIEW
인라인 뷰 Inline View, 서브쿼리

WHERE 절
조건절
조건에 만족하는 데이터(행) 만 처리하도록 설정한다
SELECT, UPDATE, DELETE 구문에서 많이 사용된다
WHERE [조건절]
조건절 : 칼럼명 연산자 조건 값의 형태로 작성한다
SELECT * FROM emp
ex) WHERE job = ‘SALESMAN’;
ex) WHERE ename = ‘SMITH’;
ex) WHERE empno = 7782;

연산자
비교(관계) 연산자
= 	같다
!= 	같지 않다
			( <>, ^= ) 
< 	작다
> 	크다

<=	작거나 같다
>= 	크거나 같다


논리 연산자
AND	두조건이 모두 만족할 때 TRUE
OR	두 조건 중 하나라도 만족할 때 TRUE
NOT	논리 부정

기타 연산자

BETWEEN a AND b
a와 b 사이의 데이터(a, b 포함)

ex)	deptno BETWEEN 10 AND 20
ex)	sal BETWEEN 1000 AND 3000
(sal >= 1000 AND (sal <= 3000)
부정문 NOT BETWEEN a AND b

IN( list )
list 에 해당하는 값중 하나라도 일치한다면 TRUE

ex)	deptno IN( 10, 20 )
(deptno = 10 OR deptno = 20 )
 부정문 NOT IN
		
LIKE	-> 최소한으로 사용 풀스캔이 될 가능성이 있어서
지정된 형식의 문자열 포맷(서식)으로 일치하는 조건
% :  여러개의 문자, 또는 문자가 없는 경우
_ :  단일 문자, 반드시 한 글자가 있어야됨

ex)	ename LIKE ’B%’ -> B로 시작하는 모든 문자열
ex)	ename LIKE ‘%B%’ -> B를 포함하는 모든 문자열
ex)	ename LIKE ‘_B%’ ->두 번째 문자가 B인 모든 문자열
ex)	ename LIKE ‘%B’ -> B로 끝나는 모든 문자열
부정문 NOT LIKE




IS NULL
컬럼의 값이 NULL인지 검사하는 연산자

ex)	WHERE mgr IS NULL
테이블의 데이터 중 (null)값은 데이터가 없음을 타나낸다
WHERE mgr = null 형식으로 조건식을 사용하면
데이터가 존재하지 않는 공간과 null데이터를 비교하는 구문이 된다
데이터가 없는 공간은 아예 검색 대상에서 제외된다
부정문 IS NOT NULL

DB 탐색(조회) 방법, SCAN
풀스캔, Full Scan
테이블의 처음부터 끝까지 전부 탐색하는 방법
인덱스 스캔, Index Scan
인덱스를 우선 조회하고 인덱스에 연결된 행을 찾아가는 탐색방법
인덱스 스캔으로 탐색하지 않으면 풀 스캔한다

ORDER BY 절
SELECT쿼리 결과를 정렬하기 위한 구문
WHERE 절 다음에 온다
오름차순 정렬(ASC)과 내림차순(DESC)이 있다
오름차순 정렬이 기본이다
ASC, ASCENDING
DESC, DESCENDING


ORDER BY 구문 형식
ORDER BY 칼럼명1, 칼럼명2,.....
칼럼명 뒤에 ASC 또는 DESC를 추가한다

NULL을 포함하는 컬럼의 정렬
오름차순(ASC) 정렬일 경우 NULL들이 마지막에 나옴
내림차순(DESC) 정렬일 경우 NULL들이 처음에 나옴
NULL데이터가 정렬되는 순서를 바꾸려면 NULLS키워드를 사용환다
NULLS FIRST : NULL데이터를 처음으로 보이게한다
NULLS LAST : NULL데이터를 마지막으로 보이게한다
ex) ORDER BY comm NULLS LAST
ex) ORDER BY comm NULLS FIRST
DESC NULLS LAST를 많이 사용하는편

DISTINCT 키워드
중복데이터를 제거하는 키워드
SELECT 키워드의 짝꿍
SELECT 키워드 바로 뒤에 붙여서 사용한다
SELECT DISTINCT ~


데이터 연결 연산자, ||
두개의 데이터를 하나의 문자열로 연결하여 표현하는 연산자
문자 || 문자
문자 || 숫자
문자 || 날짜
오라클 SQL에서 문자열을 ‘ ’감싸서 표현한다

오라클 Functions : https://docs.oracle.com/cd/E11882_01/server.112/e41084/functions.htm#SQLRF006

오라클 내장함수, SQL Functions
오라클 DB에 포함된 Built - in 함수들
오라클 SQL API Functions
단일 행 함수, Single Row Functions
테이블을 조회할 때 조회되는 모든 행에 각각 함수다 수행결과가 반영되는 함수
그룹함수, Group Function (복수 행 함수)
행들의 조회 결과를 하나의 결과로 반영하는 함수

DUAL 테이블
SYS계정(DB관리자계정)이 소유하는 테이블( owner가 sys계정)
오라클에서 제공하는 테스트용 테이블( dummy )
연산의 결과나 함수의 결과, 가상컬럼 등을 확인할 때 사용한다
SQL Functions을 테스트해보기 좋다
하나의 행으로 결과가 출력된다

Single-Row Functions 
Numeric Functions	숫자  -> Quiz
Character Functions Returning Character Values	문자함수가 문자로--|  ->Quiz
Character Functions Returning Number Values	문자함수가 숫자로--|
Datetime Functions	날짜
Conversion Functions	변환 함수
NULL-Related Functions 기타 단일행 함수
Encoding and Decoding Functions 	DECODE

 
단일 행 함수
숫자 함수, Numeric Functions	
숫자를 매개 변수로 받아서 숫자로 반환한다
JAVA의 MATH클래스와 비슷하다

문자 함수, Character Functions
문자를 매개 변수로 사용하는 함수
반환값이 문자인 함수
반환값이 숫자인 함수

날짜 함수, Datetime Functions
날짜를 매개 변수로 사용하는 함수
sysdate
현재 날짜시간을 반환하는 함수
매개변수없이 사용한다
()괄호도 사용하지 않는다

변환 함수, Collection Functions
숫자, 문자, 날짜 데이터들을 서로 형변환하는 함수

to_number : NUMBER포맷(서식) 을 가진
 VARCHAR2 -> NUMBER
to_char :  NUMBER,DATE - > 원하는 포맷(서식)의 
VARCHAR2
to_date : DATE포맷(서식)을 가진 
VARCHAR2 -> DATE

				to_char			to_date
숫자	     ---------->	  문자	          -------------->	  날짜
NUMBER <----------  VARCHAR2 <----------     DATE
to_number		      to_char
to_char
 NUMBER - > VARCHAR2 변환
to_char(number)
to_char(number, 숫자서식문자)

숫자 서식 문자 
0 : 숫자가 들어갈 자리를 확보한다, 남는 자리는 0(숫자0)으로 LPAD한다
9 : 숫자가 들어갈 자리를 확보한다, 남는 자리는 ‘ ’(빈칸)으로 LPAD한다

. : 소수점 구분 문자 추가(정수부 , 소수부)
, : 자릿수 구분 문자 추가

L : 세계 통화 기호 추가(설정된 컴)
$ : 통화가호 $

to_char(datetime)
DATE -> VARCHAR2
to_char(datetime)
to_char(datetime, 날짜 형식지정문자)

날짜 형식지정 문자
SCC : 세기
YEAR, year, Year  : 영문 년도
YYYY, YY, YYY, Y : 숫자 년도, Y의 개수는 년도를 표현하는 
자릿 수
MM : 숫자 월 
MONTH, MON : 문자 월


Q : 쿼터, 분기
DD    : 월 기준 날짜
D      : 주 기준 날짜(일요일부터 1, 토요일 7) 
DDD :  년 기준 날짜

DAY : 요일
DY  : 요일 약자

HH : 12시간 기준 표기법 시간
HH12 : 12시간 기준 표기법 시간
HH24 : 24시간 기준 표기법 시간

MI : 분
SS : 초
FF : 밀리초
AM, PM, A.M., P.M. : 오전/오후

오라클 날짜 대표 자료형
DATE : 초단위까지 표현 가능
TIMESTAMP : 밀리초단위까지 표현 가능

현재 시간 함수
sysdate : DATE타입으로 표현한 현재 시간
systimestamp : TIMESTAMP타입으로 표현한 현재시간
날짜 서식중 ‘FF’(밀리초)를 사용하려면 TIMESTAMP타입이어야한다


기타 단일 행 함수
NVL
매개변수가 NULL인지 판단하여 NULL이라면 원하는 값으로 변환하는 함수
NVL ( 데이터, 원하는 값 )

NVL2
매개변수가 NULL인지 판단하여 NULL이라면 원하는 값으로 변환하는 함수 NULL이 아닐 경우도 원하는 값으로 변환할 수 있다
NVL2
(데이터, NULL이 아닐 경우 반환값, NULL일 경우 반환값)

NULLIF
두 개의 값이 같은지 비교하여 같으면 NULL반환
다르면 첫번째 매개 변수를 반환
NULLIF( 첫번째값, 두번째값 )

DECODE
비교값을 여러 개 나열하여 비교결과를 반환하는 함수
DECODE( 기준값,
 비교값1, 반환값1,
 비교값2, 반환값2, 
….
default값)
 default값은 생략 가능
기준값과 비교값이 같을 때 비교값 바로 다음에 오는 반환값을 반환

CASE 구문
DECODE 함수와 비슷한 동작을 하는 구문
CASE~WHEN THEN ~ END 로 구성된다
WHEN THEN 절의 조건에 따른 반환값 설정
WHEN THEN 절의 마지막에 ELSE 구문 추가 할 수 있다

DB 수행되는 과정










Aggregate Functions
COUNT
SUM
AVG
MAX
MIN

그룹함수,  Group Function
복수 행 함수
테이블의 여러 행들의 데이터를 그룹화하여 하나의 결과로 반환하는 함수
주로 테이블 데이터의 통계처리를 수행한다

COUNT : 데이터를 가지고 있는 행 수를 반환
NULL 값은 무시한다
NULL 값을 가지는 컬럼은 전체 행 수에 포함하지 않는다
count(*) vs count(1) 성능 이슈는 신경 쓰지않는다
SUM : 합계
AVG : 평균
MAX : 최대
MIN : 최소

GROUP BY 절
데이터(행) 들을 원하는 기준으로 그룹화할 때 사용하는 절
그룹함수를 사용할 때 적용한다
컬럼을 기준으로 같은 값을 가지고 있는 행끼리 그룹화한다


구문 형식
GROUP BY 컬럼명1, 컬럼명2,.......                                                                                  
SELECT절에서 그룹함수 외의 다른 컬럼을 같이 조회하려면
GROUP BY 절에 그룹 함수를 제외한 모든 컬럼을 넣어 주어야함
ex)	SELECT
deptno
sum(sal)
FROM emp
ORDER BY deptno;

ex)	SELECT
deptno,
job
count(*)
FROM emp
ORDER BY deptno,job;
HAVING 절
GROUP BY 절 다음에 올수 있는 조건절
WHERE 절과 기능이 같다
WHERE 절은 그룹 함수를 사용할수 없다
그룹함수의 결과를 조건식으로 사용하고 싶으면 HAVING절을 사용해야한다

SELECT 구문 작성 순서(문법순서)
SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY

SELECT 구문 수행 순서
FROM : 조회 될 대상 테이블을 확인
WHERE : 검색조건에 맞는 조회대상(행)을 지정한다
GROUP BY : 그룹화
HAVING : 그룹함수를 이용한 조건절 수행
SELECT : 보여질 컬럼(열)을 지정한다
ORDER BY : 정렬
수행순서에 따라 Alias(별칭)도 반영된다
SELECT에서 지정한 Alias를 ORDER BY에서 사용 함
SELECT에서 지정한 Alias를 WHERE에서 사용 못함
WHERE절에서 그룹함수를 사용할수 없다(GROUP BY전)

조인, JOIN
두개 이상의 테이블을 한번에 SELECT 하는방법
Primary key 와 Foreign key를 이용하여 조인 조건을 설정한다
조인조건 : 두개 이상의 테이블을 결합할 때 사용하는 조건

Primary key, 기본키, 주키, PK
테이블의 각행들의 구분하기 위한 식별값으로 쓰이는 컬럼
--------------기본키 무결성 원칙-----------
해당 컬럼은 테이블에서 고유한 값이어야 한다 - UNIQUE
해당 컬럼은 NULL값을 가질 수없다 - NOT NULL
-------------------------------------------------
Foreign key, 외래키, 참조키, FK
다른 테이블의 컬럼을 참조하고 있는 컬럼
다른 테이블의 Primary key를 참조한다
------------참조 무결성-------------------
참조 테이블의 기본키의 값으로 존재하는 값만 가질 수 있다
-----------------------------------------------


조인 문법 종류
오라클 전용 문법 
ANSI 표준 문법

ANSI (American National Standards Institute)
미국 국립표준 협회
문자 인코딩 (  ASCII )
ISO 기구에 속해있다
ISO (Internation Standard Organization )
국제 표준화 기구
 OSI 7계층 모형
IEEE ( Institude of Electric and Electorics Engineers )
전기, 전자 기술자 협회
IEEE 802.3 - 이더넷 (유선 통신)
IEEE 802.11 - 와이파이

EQUI JOIN, 등가 조인
오라클 전용 구문

조인의 기본이 되며, FROM절에 조인 대상 테이블들, 로 나열한다
조인 대상 테이블들의 공통데이터를 가지는 컬럼을 이용해 조인한다(등가 = )
조인 컬럼이 같은 값을 가질 때 조회 될 수 있도록 WHERE절에서 조인 조건을 적용한다
가장 많이 사용되는 구문 형식이다

INNER JOIN, 내부조인
ANSI 표준 문법
EQUI JOIN과  같은 결과를 얻을 수 있다

구문형식
FROM 기본테이블
INNER JOIN 조인테이블
                                                       ON 조인조건절
INNER JOIN 키워드에서 INNER 생략하고 JOIN만 사용해됨

NON-EQUI
EQUI JOIN과 문법은 같으나 조인조건의 연산자가 ‘=’ (equal)이 아닌 경우

SELF JOIN
하나의 테이블로 자기 자신 테이블과 조인하는것

CROSS JOIN
카테시안 곱을 얻을 때 사용한다
카테시안 곱, Cartesian Product
테이블들의 조인 결과로 조회가능한 모든 경우의 수를 출력한 것
모든 컬럼
모든 행의 조합
ex)	4개의 컬럼, 3개의 행을 갖는 TB_1
4개의 컬럼, 3개의 행을 갖는 TB_2

TB_1 과 TB_2의 카테시안 곱을 생성하면
11개의 컬럼과 15개의 행을 결과로 가진다

NATURAL JOIN
조인 조건 없이 EQUI JOIN(등가조인)을 수행함
조인 조건이 되는 컬럼을 자동으로 설정한다
단, 조인 조건을 개발자가 마음대로 제어하는데 어려움이 있다


OUTER JOIN, 외부 조인
조인 컬럼 중에서 한 쪽이 값을 가지고 있지 않을때 사용하는 조인
 NULL값이 포함된 컬럼을 조인 결과에 추가해준다

오라클 전용문법에서는 조인 조건에서 (+) 연산자를 사용한다

ANSI 표준문법에서는 OUTER JOIN 구문을 사용한다
( FROM절의 테이블 나열 순서와 조인 조건의 컬럼의 순서를 똑같이 배치한다)
RIGHT OUTER JOIN
RIGHT OUTER JOIN은 왼쪽 테이블(아래 예제에서 emp테이블)에 조인시킬 컬럼의 값이 없는 경우 사용한다.
조인조건에서 왼쪽의 컬렘에 (+)연산자가 붙어 있으면 RIGHT OUT JOIN으로 변환

LEFT OUTER JOIN
LEFT OUTER JOIN은 오른쪽 테이블(아래 예제에서 emp테이블)에 조인시킬 컬럼의 값이 없는 경우 사용한다.
조인조건에서 오른쪽의 컬렘에 (+)연산자가 붙어 있으면 LEFT OUT JOIN으로 변환

FULL OUTER JOIN
FULL OUTER JOIN을 ANSI 표준 구문에만 존재한다
조인되는 테이블 양측에 모두 NULL값을 가지는 컬럼


서브쿼리, Subquery
SQL 구문안에 포함된  또 다른 SQL구문
메인쿼리 와 서브쿼리(내부쿼리)로 지칭한다
Subquery는 괄호() 로 묶어야 한다.

서브쿼리의 종류 : 적용하는 위치따른 분류
스칼라 서브쿼리 : SELECT절에서 컬럼의 값으로 사용되는 서브쿼리
서브쿼리 : 주로 WHERE절의 조건으로 사용되는 서브쿼리
인라인 뷰 : FROM절의 조회 대상으로 사용되는 서브쿼리

서브쿼리의 종류 : 서브쿼리 수행 결과의 형태에 따른 분류
단일 행 서브쿼리 : 조회 결과가 하나의 행으로 나오는 것
다중 행 서브쿼리 : 조회 결과가 여러 행으로 나오는 것 
다중 열 서브 쿼리 : 조회 결과가 여러 컬럼(열)으로 나오는것

다중 행 서브쿼리
복수 행 서브쿼리
서브쿼리조회 결과가 2 건 (2행) 이상 출력되는 서브쿼리
다중 행 전용 연산자만 사용 가능하다
= != <> 들의 단일 행 연산자는 사용할 수 없다
스칼라 서브쿼리로 사용할 수 없다

다중행  서브 쿼리 전용 연산자
IN : 단일 행 연산자로 사용될 때랑 같음
동등비교(=)를 위해 사용한다
서브쿼리의 결과중 하나라도 같은 값이 있으면 조회

ANY ( == SOME ) : 비교컬럼이 서브쿼리의 결과 중 어떤값이라도     조건에 만족하려면 조회된다 ( OR의 동작과 비슷 )
컬럼명 = ANY (  a, b, c ) : abc 중 어떤 값이라도 같다면 조회;
컬럼명 < ANY (  a, b, c ) : abc 중 최대 값보다 작으면 조회
컬럼명 > ANY (  a, b, c ) : abc 중 최소값 보다 크다면 조회

ALL : 비교컬럼이 서브쿼리의 결과 중 모든 값에 조건에 만족하려면 조회된다 ( AND의 동작과 비슷 )
컬럼명 = ALL (  a, b, c ) abc모두와 같은 값 조회
컬럼명 < ALL (  a, b, c )abc 중 최소값보다 작으면 조회
컬럼명 > ALL (  a, b, c )abc 중 최대값보다 크다면 조회

EXISTS : 서브쿼리와 메인쿼리를 비교하여 서브쿼리로 조회되는 결과값으로 존재하는 행이라면 메인쿼리에서 조회되도록 한다
IN연산자는 데이터를 직접조회하여 그결과를 비교하고 판단한다
EXISTS연산자는 데이터(행) 존재하는지만 파악하고 값을 직접 비교하지는 않는다

다중 열 서브쿼리
조회 결과가 여러 컬럼(열)으로 나오는것
조회 조건을 조건절로 사용할 때 비교 컬럼을 () 묶어서 표현한다
 ex)	WHERE (deptno, sal) IN (
SELECT deptno, max(sal) FROM emp
GROUP BY deptno
)
집합 연산자
두 개의 쿼리 결과를 하나의 집합(결과)로 만드는 연산자
조회 결과 집합(Result Set)을 하나로 합쳐서 보여준다
각 조회 쿼리의 결과가 컬럼수, 컬럼이름이 같아야 한다
UNION : 합집합
UNION ALL : 합집합, 중복 허용
INTERSECT : 교집합
MINUS : 차집합

무료 ERD 웹 툴 : https://aquerytool.com/
ERD, Entity Relationship Diagram
개체 관계 도
Entity : 개체, 테이블
Relation : 관계, 테이블간의 관계(PK-FK)
그 외 무료 툴
StarUML 5.0
INSERT - DML
테이블에 새로운 데이터(행)을 추가할 때 사용하는 SQL

INSERT 구문 형식
--지정한 컬럼에 값을 삽입하는 구문
INSERT INTO tablename ( col1,col2,.... ) 
VALUES ( data1, data2, data3,..... );

컬럼을 따로 지정하지 않고 삽입하는 구문
모든 컬럼의 값을 순서대로 입력해야한다
값의 순서 COLUMN_ID를 따른다 
INSERT INTO tablename
VALUES ( data1, data2, data3, … );

VALUES절 대신 SELECT 구문을 이용하여 조회된 값을 삽입
INSERT INTO tablename ( col1,col2,.... ) 
SELECT 절;

INSERT INTO tablename ( col1,col2,.... ) 
SELECT 절;

INSERT ALL -DML
한번에 여러 행을 삽입할 수 있게 해주는 DML 쿼리
SELECT 구문의 결과를 조건에 따라 INSERT 되도록 하는 구문
여러 개의 INSERT구문으로 작성해야할 쿼리ㅏ를 하나로 합칠 수 있다
INSERT ALL 구문 형식
INSERT ALL
WHEN 조건
THEN INTO tablename ( columns )
VALUES ( datalist )
[WHEN절 여러 번 가능]
SELECT 절;

THEN INTO 절의 컬럼명, VALUES절 생략 가능 함
컬럼명, VALUES절 생략 시  SELECT절에 서 조회한
모든 데이터(모든 컬럼)에 해당하는 값을 삽입한다

DELETE - DML
테이블의 행을 삭제할 때 사용하는 구문
DELETE 구문형식
DELETE FROM tablename
				WHERE 조건;

FROM 키워드 생략가능
WHERE 절 없이 사용하면 테이블 전체 삭제	

UPDATE - DML
테이블의 데이터(행)을 수정하는 구문
특정 행의 컬럼값을 변경 할 수 있다
UPDATE 구문 형식
UPDATE tablename
SET col1 = 변경값1, col2 = 변값2. …
WHERE 조건;

WHERE절 없이 사용하면 모든 행이 변경됨

MERGE - DML
오라클 전용 문법
SELECT 수행 결과에 따라 UPDATE 또는 INSERT를 수행한다
SELECT 조회 결과가 존재하면 UPDATE 또는 DELETE 수행
SELECT 조회 결과가 존재하지 않으면 INSERT 수행
MERGE 구문 형식
MERGE INTO tablename
USING (
SELECT 절 - 인라인 뷰(서브쿼리)
				(
				ON (  조건절 )
				WHEN MATCHED THEN 구문
WHEN NOT MATCHED THEN 구문

INTO : 삽입, 갱신, 삭제가 이루어지는 테이블
USING : 조건 비교할 소스테이블 또는 인라인 뷰 (서브쿼리)
ON : WHEN절에서 반응하는 조건을 부여하는 절
WHEN MATCHED  : ON절의 조건에 만족하는 USING절 테이블의 데이터가 존재하면 수행 UPDATE, DELETE를 수행
WHEN NOT MATCHED  : ON절의 조건에 만족하는 USING절 테이블의 데이터가 없으면 수행 INSERT를 수행
추가 !!!
- INTO : DATA가 UPDATE되거나 INSERT 될 테이블 또는 뷰를 지정.
- USING : 비교할 SOURCE 테이블 또는 뷰나 서브쿼리를 지정, INTO절의 테이블과 동일하거나 다를 수 있다.
- ON : UPDATE나 INSERT를 하게 될 조건으로, 해당 조건을 만족하는 DATA가 있으면 WHEN MATCHED 절을 실행하게 되고, 없으면 WHEN NOT MATCHED 이하를 실행하게 된다.
- WHEN MATCHED : ON 조건절이 TRUE인 ROW에 수행 할 내용 (UPDATE, DELETE포함 될 수 있음)
- WHEN NOT MATCHED : ON 조건절에 맞는 ROW가 없을 때 수행할 내용 (INSERT)


트랜잭션, Transaction
데이터를 처리하는 일련의 작업단위
클라이언트마다 관리되는 데이터베이스에 작업한 내역들을 트랜잭션이라고 한다
COMMIT, ROLLBACK 에 의해서 작업한 내역들을 반영하거나, 되돌린다
트랜잭션의 상태 변화
트랜잭션의 시작
INSERT, UPDATE, DELETE 코드를 수행했을때
실행 가능한 DML문장이 수행되었을 때부터 시작된다 
트랜잭션의 끝
COMMIT 또는 ROLLBACK을 수행했을 때
DDL 이나 DCL 을 수행했을 때

AUTO Commit (자동 반영) 상황
DDL, DCL 완료되는 시점
SQL*Plus 의 정상 종료 (exit 명령 수행)

Auto Rollback (자동 미반영 ) 상황
시스템의 비정상적인 종료
SQL*Plus의 비정상 종료(윈도우 창 닫기 버튼 클릭)
LOCK, 락
ROW LOCK (행 단위 락)
TABLE LOCK(테이블 단위 락)
DB LOCK(데이터베이스 단위 락)

특정 사용자(클라이언트)에게만 해당 락 영역에 대한 접근을 허용하는 것
트랜잭션 변경사항은 ROW LOCK이 발생한다
LOCK 영역에 접근하여 작업중인 클라이언트가 있으면
그 외 사용자는 LOCK영역의 데이터에 접근할 수 없다 (SELECT도 안된다)

DDL, Data Definition Language, 데이터 정의어
DB 객체(테이블, 사용자 계정, 뷰, 인덱스, 시퀀스 등등)를 
생성,변경, 삭제하는 SQL
구문 
CREATE - 생성
ALTER    - 변경
DROP      -삭제
테이블, TABLE, TB
데이터베이스의 데이터를 저장하는 단위
행(row, record), 열(column, col, 컬럼)으로 구성된 객체
연관성있는 데이터끼리 독립적인 테이블로 구성된다
테이블들끼리 관계를 맺어 연관성을 확보한다 ( PK - FK )
관계 : Relation, Relationship
개체 : Entity (Table)
ER, Entity - Relation
개체 - 관계
테이블들이 관계를 짓고 있는 것
RDB, Relation DataBase, 관계형 데이터베이스
테이블들의 관계를 기반으로 이루어진 DB
CREATE TABLE - 테이블 생성
컬럼명은 해당 테이블 내에서 중복 불가
컬럼은 반드시 자료형이 명시되어야함

CREATE TABLE tablename (
컬럼명1 자료형1, 
컬럼명2 자료형2, 
컬럼명3 자료형3, 
…….
)
----------------------------------------------------
CREATE TABLE tablename
AS
SELECT 구문;

NUMBER - 자료형
숫자 타입
정수, 실수 둘다  표현 가능하다
음수, 0, 양수 표현 가능
가변 길이 타입

NUMBER : 최대 38자리까지 저장가능한 타입[정수, 실수 가능]
NUMBER(w) : 최대 w자리 까지 정수만 저장가능한 타입
NUMBER(w, d) : 전체 w자리가능, 소수점이하 d자리까지 지정자리 확보
ex)	NUMBER(7, 3) 	0000.000
전체 7자리, 정수부 4자리, 소수부 3자리
ex)	NUMBER(3, 5)	0.00000 ->0.00XXX
전체 숫자는 3개가능, 소수점 이하 5째자리 확보
VARCHAR2(n) - 자료형
최대 n 길이의 문자를 저장할 수 있는 데이터타입
가변 길이 문자 데이터
실제 저장되는 데이터의 크기만큼만 저장공간을 사용한다
최소 크기가 1 이다
최대 저장길이는 n으로 반드시 명시해야한다
최대 저장 크기 제한은 4000 이다

**한글 인코딩(character set)을 UTF-8(AL32UTF8)을 사용하면 한글 한글자당 3바이트가 필요하다
**VARCHAR2 는 글자의 바이트 수만큼 길이를 파악하는 것이 기본이다
**VARCHAR2 의 길이 지정자 n 뒤에 BYTE, CHAR 접미어 사용가능
BYTE - 바이트 단위로 길이를 지정한다(기본값, 생략 가능)
CHAR - 문자 길이로 지정한다
ex)	VARCHAR2 (30 CHAR)
영어, 한글, 숫자 상관없이 30글자 표현 가능
CHAR(n) - 자료형
고정 길이 문자 데이터
n으로 지정한 크기만큼 저장 공간을 확보한다
최소 크기 1
CHAR 라고만 자료형을 적용하면 자동으로 크기가 1이 된다
VARCHAR2 -- 사용불가, (n) 크기 지정 필수
CHAR 	--사용가능, 자동으로 n이 1로 지정됨
최대 20000 까지만 가능
VARCHAR2 와 CHAR 는 문자 표현하는 방식이 같다
둘다 같은 문자로 인식한다
하지만 저장공간을 다루는 방식이 달라 표현에 신경을 써야한다
데이터를 활용할 때 trim() 함수를 사용하는 것이 좋다
CHAR 타입은 데이터가 자료형의 크기보다 작으면 남는 공간을 공백(‘ ‘) 으로 RIGHT PADDING 한다
DATE - 자료형
날짜시간타입(detetime)
날짜와 시간을 저장할 수 있는 타입
초단위까지 표현 가능
서식문자를 이용하여 년월일 , 시분초, 오전/오후 등을 표현
BC 4712/01/01 ~ 4712/12/31 의 표현 범위를 가짐
TIMESTAMP - 자료형
날짜시간타입(detetime)
DATE 타입의 확장 타입
밀리초까지 표현가능
TIME ZONE(시간대) 설정이 들어갈 수 있음
sysdate : DATE타입의 현재 날짜/시간
systimestapmp : TIMESTAMP타입의 현재 날짜/시간
RR, YY의 서식 문자의 차이
to_char 에서는 아무런 차이가 없다
to_date 에서는 현재 날짜와 관련하여 인식되는 년도가 달라진다 
YY : 현재 년도의 앞 두자리가 붙는다
ex)	to_date(‘13/4/6’, ‘yy/mm/dd’) 	->	2013년
to_date(‘83/2/1’, ‘yy/mm/dd’	->	2083년
RR : 현재 년도와 입력한 연도에 따라 달라진다
현재년도	입력년도	결과
00~49	00~49	현재 세기	20
00~49	50~99	이전 세기	19

50~99	00~49	다음세기
50~99	50~99	현재세기
ex)
2015		29/03/02	2029
2028		69/9/13	1969

2077		20/03/31	2120
2066		60/03/31	2060
LONG - 자료형
가변 길이 문자
최대 길이가 2GB
테이블 당 한개의 컬럼만 지정할 수 있다
테이블 내에 데이터가 저장된다
LOB, Large OBject
가변 길이 타입
최대 4GB 까지 저장 가능
테이블에 여러 컬럼으로 지정할 수 있음
참조형으로 동작 한다
테이블에는 데이터의 저장 위치만 기록한다
실제 데이터는 따로 테이블 밖에 저장한다

BLOB : 바이러니, Binary, 이진 데이터	!
CLOB	: 문자, Character, 문자 데이터
NCLOB : 문자, National Character
CLOB 데이터 조회하기				!
DBMS_LOB 객체를 이용한다
DBMS_LOB.SUBSTR( col, len, offset )
col - 조회할 LOB 컬럼
len - 조회할 데이터의 길이
offset - 조회가 시작되는 오프셋
CLOB 데이터 전체 조회하기
DBMS_LOB.SUBSTR( col, length(co1), 1)
첫번째 데이터부터 co1 컬럼의 길이만큼 조회하기
RAW, LONG RAW
바이너리 데이터를 저장한다
이미지나 사운드 같은 바이너리 파일을 저장할 때 사용하는 데이터타입
이진 데이터가 저장되고 조회 시 16진수로 출력된다
문자로 변환할 수 없다
사용하지 말것 BLOB 추천~~~~!!!

스키마, Schema
데이터베이스의 구조
데이터베이스에 대한 메타데이터

데이터베이스를 바라보는 관점에 따라 나눈 스키마
개념스키마 : 전체적인 구조
DB의 전체적인 논리 구조
객체들의 관계(Relation), 제약조건등을 나타낸다
DB에 대한 보안/권한/무결성 등을 정의한 것
내부스키마 : 프로그래머가 바라보는 관점의 구조
DB의 물리적인 저장 구조
HDD에 어떻게 저장되어 있는지에 대한 관점
외부스키마 : 사용자관점에서 바라보는 데이터베이스 구조
SELECT를 수행하여 바라보는 DB 조회 결과

제약사항, 제약조건, Constraints
테이블에 부적절한 데이터가 입력되는 것을 방지하는 목적으로 테이블 컬럼에 설정하는 필터 조건
데이터의 무결성을 유지한다 
데이터 무결성, Integrity
프로그램이 생명주기(Life Cycle)를 거치는 동안 데이터가 정확하고 일관성있는 값을 유지하고 그값이 보장되는 성격을 무결성


제약사항 지정하는 방식
1.CREATE TABLE 구문에 컬럼과 함께 지정하는 방식
(컬럼 레벨에서 지정)	평가에 나옴~~~~!!! 
2.생성된 TABLE에 ALTER TABLE  구문을 이용하여 추가적으로 반영하는 방식	(테이블 레벨에서 지정하기) 	평가에 나옴~~~~!!!
제약사항의 종류
NOTNULL
 컬럼의 데이터로 NULL을 허용하지 않음
NULL 데이터 입력할 수 없음
컬럼의 데이터타입과 연계되어 적용되는 제약사항
ALTER TABLE tablename MODIFY ~ 구문을 이용한다
UNIQUE
컬럼에 중복데이터를 허용하지 않는다
데이터의 유일성을 확보한다
인덱스를 자동으로 생성한다
UNIQUE 가 설정된 컬럼은 테이블의 UNUQUE KEY라고 부른다
(유일키, UK)
CHECK
컬럼에 들어갈 수 있는 데이터의 범위를 지정하는 제약사항
WHERE절의 조건문과 같은 내용을 제약조건으로 적용시킨다
(search_condition으로 적용)
DEFAULT
데이터를 입력하지 않고 INSERT 할때 입력될 기본값을 지정하는 제약사항
NOT NULL 처럼 컬럼이 추가 정보로 등록된다
제약사항 항목으로 부여되지 않는다
user_constraints 로 확인 할 수 없다( 제약조건정보 자료사전)
user_tab_columns 로 확인해야한다(테이블 컬럼정보 자료사전)
PRIMARY KEY
기본키, 주키
테이블을 대표하는 컬럼으로 지정하는 키
NOT NULL, UNIQUE 제약사항의 특성이 자동으로 부여됨
NOT NULL, UNIQUE 가 별도의 항목으로 제약사항이 생성되지 않는다
PRIMARY KEY 자체가 NOT NULL이며 UNIQUE 이다
UNIQUE 속성을 가지고 있어서 인덱스가 자동으로 생성된다
외래키(FK)들이 참조할 수 있는 자격이 부여된다
FOREIGN KEY
외래키, 보조키, 참조키
기본키(PK)를 참조하는 컬럼 또는 컬럼들
참조하고 있는 컬럼(기본키)과 데이터타입이 일치해야한다
참조무결성 원칙을 지켜야한다
외래키는 기본키로 존재하는 값을 가져야한다
→외래키가 참조하고 있는 기본키는 삭제할 수 없다
→외래키들을 전부 지우고 기본키를 삭제할 수 있다
→외래키의 값을 null로 바꿔도 된다
외래키 지정구문 마지막에 넣을 수 있는 옵션
ON DELETE SET NULL	옵션
PK 가 삭제 되면 자동으로 NULL로 변경됨
ON DELETE CASCADE	옵션
PK 가 삭제 되면 자동으로 같이삭제됨
PK, FK의 관계
식별관계, Identifying Relationship
FK가 해당 테이블에서 PK 역할을 수행하는 것
비식별관계, Non-Identifying Relationship
FK가 해당 테이블에서 PK 역할을 수행하지 않는 것
ERD 식별관계, 비식별관계 


부모테이블의 유니크 키나 기본키로 지정된 컬럼이 자식테이블의 기본키 컬럼과 연결된 경우 실선으로 표기되고 식별 관계라고 합니다.

부모테이블의 유니크 키나 기본키로 지정된 컬럼이 자식테이블의 일반 컬럼과 연결된 경우 점선으로 표기되고 비식별 관계라고 합니다.

쉽게 이야기하면 부모 컬럼을 참조하는 자식 컬럼이 식별 (PK) 가능하면 식별 관계라고 하고 식별이 가능하지 않으면 비식별 관계라고 합니다. 즉, 자식 컬럼이 PK 인지 아닌지에 따라 식별 관계, 비식별 관계라고 이야기합니다.
기본키 지정 방법
방법1 : 컬럼에 제약조건 이름을 명시하여 지정하기
CREATE TABLE cons_09(
    no NUMBER CONSTRAINT cons_09_pk PRIMARY KEY,
    data VARCHAR(20) NOT NULL);
방법 2 : 컬럼에 제약조건 이름없이 지정하기
CREATE TABLE cons_10(
    no NUMBER PRIMARY KEY,
    data VARCHAR(20) NOT NULL);
방법 3 : 컬럼 설정 이후에 CONSTRAINT 키워드로 지정하기
CREATE TABLE cons_11(
    no NUMBER,
    data VARCHAR(20) NOT NULL,
    CONSTRAINT cons_11_pk PRIMARY KEY (no));
 방법 4 : 테이블 생성이후 ALTER TABLE로 지정하기
CREATE TABLE cons_12(
    no NUMBER,
    data VARCHAR(20) NOT NULL);
ALTER TABLE cons_12
ADD CONSTRAINT cons_12_pk PRIMARY KEY(no);

외래키 지정방식
방법1 : 컬럼 설정 이후에 CONSTRAINT 로 지정하기
create table cons_14 (
    num NUMBER,
    data varchar2(50),
    constraint cons_14_fk
        foreign key (num) --자기 테이블  FK
        references cons_12 (no) );-- 참조 테이블 PK

방법2 : 테이블 생성 후에 ALTER TABLE로 지정하기
create table cons_15 (
    num NUMBER,
    data varchar2(50) );
    
ALTER TABLE cons_15
ADD constraint cons_15_fk
        foreign key (num) --자기 테이블  FK
        references cons_12 (no) )-- 참조 테이블 PK

    
ALTER TABLE - 테이블 변경
테이블 구조( Schema, 스키마)를 변경하기 위한 SQL
테이블을 지정해서 어떤 변경 사항을 적용할 것인지 따라 추가 구문이 달라진다
수행하는 목적에 따라 구문의 키워드가 달라진다
ADD		- 테이블의 구조 (스키마) 추가
MODIFY	- 테이블의 구조 (스키마) 변경
DROP	- 테이블의 구조 (스키마) 삭제

ALTER TABLE tablename ADD ( colname coltype);
새로운 컬럼 추가
마지막 컬럼으로 추가된다 (마지막 COLUMN_ID 부여받는다)
이미 존재하는 컬럼들 중간에 추가할 수 없다

ALTER TABLE tablename MODIFY ( colname coltype) ;
컬럼 데이터타입 변경
데이터타입을 바꾸거나, 크기를 변경할 수 있다
데이터타입에 종속된 제약조건을 변경할 수 있다 (ex NOT NULL)
해당 컬럼에 데이터가 있을 때 없을 때 동작이 다르다

데이터없음		데이터있음

타입 :변경 가능		변경 불가
크기 :변경 가능		이미 존재하는 데이터보다 작게 불가
예의 : CHAR 와 VARCHAR2 는 이미 데이터가 있어도 서로 변경가능

ALTER TABLE tablename DROP COLUMN colname;
컬럼 삭제
테이블의 컬럼 삭제는 테이블단위로 LOCK이 걸린다
서비스 중에 컬럼을 함부로 DROP 해서는 안된다
ALTER TABLE tablename SET UNUSED ( colname );
컬럼 비활성화
복구 불가능함
물리적으로 삭제하지 않지만 컬럼을 사용할 수 없게 만든다
ALTER TABLE tablename DROP UNUSED COLUMNS;
비활성화된 컬럼들 물리적 삭제(완전 삭제)
ALTER TABLE tablename RENAME TO	세테이블명;
테이블명 변경
ALTER TABLE tablename RENAME COLUMN 기존컬럼명 TO 새컬럼명;
컬럼명 변경

테이블 삭제	!!
DROP TABLE tablename
DDL
Rollback 불가능 
테이블 삭제
TRUNCATE TABLE tablename
DDL
Rollback 불가능 
테이블 내용(데이터) 삭제
공간도 삭제한다
테이블 스키마를 유지한다
DELETE tablename
DML
Rollback 가능 (복원가능)
테이블 내용(데이터) 삭제
삭제시 공간은 남아있다

TRUNCATE 와 DELETE 의 차이점
TRUNCATE	 DDL
DELETE 	 DML
TRUNCATE는 데이터 차지하고 있던 물리적인 공간을 삭제
용량이 줄어든다
DELETE는 데이터가 차지하고 있던 공간을 빈공간으로 만듬
용량이 유지된다
일반적인 데이터 삭제에는 DELETE를 사용하고
테이블 전체 데이터를 초기화(삭제)할 때에는 TRUNCATE 사용

인덱스, Index
색인
테이블의 검색(탐색) 속도 향상을 위한 데이터베이스 객체
테이블의 컬럼을 기준으로 적용하는 객체
하나의 테이블에 여러 개 인덱스 적용 가능
테이블과는 독립적으로 생성되는 오브젝트
테이블의 컬럼에 의존적

UNIQUE KEY(유일키, UK) 제약 사항이 걸린 컬럼은 인덱스를 자동으로 생성한다
테이블의 컬럼값을 전부 추출해서 인덱스를 생성한다
인덱스에는 기준 컬럼값의 값과 원본데이터 위치를 저장하고 있다
인덱스 장점
테이블 탐색할 때 전체탐색(FULL SCAN) 횟수를 줄여준다
전체탐색 상황에서도 시스템 성능 저하를 일부분 줄여준다
인덱스 단점
인덱스 객체를 생성하는 데 시간이 필요하다
인덱스 객체를 위한 별도의 공간이 필요하다
검색 성능은 향샹되지만 추가, 삭제, 수정에는 큰도움이 되지않는다
추가,삭제,수정이 테이블에 발생하면 인덱싱 작업을 다시 수행함
인덱스 생성이 필요한 경우
데이터가 많을 때( 약 1000건 이상 )
WHERE 구문에서 조건으로 특정 컬럼이 많이 사용할 때
JOIN 조건(ON)절에서 특정 컬럼이 많이 사용할 때
인덱스 생성이 불필요한 경우
데이터가 적을 때 ( 수 천 건 미만)
SELECT보다 INSERT, UPDATE, DELETE 가 빈번한 경우
인덱스가 적용된 조회 결과가 전체 행의 상당 부분을 차지할 때 (약15%)

인덱스 종류
NON-Unique INDEX : 중복 허용 인덱스
CREATE INDEX 인덱스명 ON 테이블명( 컬럼명 );
Unique INDEX	: 중복을 비허용 인덱스
CREATE UNIQUE INDEX 인덱스명 ON 테이블명( 컬럼명 );
Composite INDEX : 복합 컬럼 인덱스
CREATE [UNIQUE]  INDEX 인덱스명 
ON 테이블명( 컬럼명1, 컬럼명2,.......... );
인덱스 재생성 구문
ALTER INDEX 인덱스명 REBUILD;

INSERT, UPDATE, DELETE가 많이 발생한 테이블은 기존에 만들어져 있는 인덱스와 데이터가 달라지게 된다
인덱스의 효과가 떨어진다
인덱스 삭제
DROP INDEX 인덱스명;
인덱스 자료사전
user_indexes :  인덱스 정보 자료사전
user_ind_columns : 인덱싱 컬럼 정보 자료사전

뷰, VIEW
복잡한 쿼리를 간단하게 표현하려는 목적을 가지고 있다
접근할 수 있는 데이터 범위(컬럼)을 축소시키기 위해 사용하기도한다
테이블에서 조회되는 컬럼을 제한할 수 있다
조회결과를 저장하지 않는다
VIEW는 SELECT 쿼리(서브쿼리)를 텍스트로 저장하고 있다
VIEW는 이름만 봐서는 TABLE인지 VIEW 인지 구분할 수 없다
자료사전들은 대부분 VIEW이다
뷰를 통해서 원본 테이블에 조회, 삽입, 수정, 삭제가 가능하다

뷰 생성 구문
CREATE [OR REPLACE] [FORCE | NOFORCE] VIEW viewname
AS ( 서브쿼리 )
[ WITH CHECK OPTION ] [CONSTRAINT 제약조건]
[WITH READ ONLY]

CREATE VIEW : 뷰 생성
CREATE OR REPLACE : 뷰 생성 또는 서브쿼리 수정
같은 이름의 뷰가 있으면 서브쿼리 수정
같은 이름의 뷰가 없으면 서브쿼리 생성
FORCE  : 서브쿼리의 조회대상(테이블)이 존재하지 않아도 뷰생성
NOFORCE : 서브쿼리의 조회대상(테이블)이 존해야하지만 뷰생성
둘다 적지 않으면 NOFORCE로 동작함	
WITH CHECK OPTION : 제약조건에 맞는 데이터만 삽입,수정 가능
CONSTRAINT 키워드로 제약조건을 넣지 않으면
서브쿼리로 조회할 수 있는 데이터만 삽입, 수정가능
WITH READ ONLY : 조회 전용 뷰로 설정
뷰 삭제 구문
DROP VIEW viewname;
뷰 관련 자료사전
user_views


시퀀스, Sequence
연속적인 숫자를 생성하는 객체
정수값으로 생성한다
생성된 숫자는 테이블의 행을 구분하는 PRIMARY KEY로 사용된다
테이블 내에서 유일한 숫자를 자동으로 생성(Auto increment)할 때 사용한다
테이블마다 적용할 시퀀스를 각각 따로 생성해서 관리한다
(테이블 5개면 시퀀스도 5개)
시퀀스 생성 구문
CREATE SEQUENCE 시퀀스명;
-> 1부터 1씩 증가하는 시퀀스를 생성한
CREATE SEQUENCE 시퀀스명
[START WITH n]			--시작값
[INCREMENT BY n]		--증가값
[MAXVALUE n | NOMAXVALUE]-- 최대값
[MINVALUE n | NOMINVALUE]  -- 최소값
[CYCLE | NOCYCLE ]		--순환구조 여부
[CACHE n | NOCACHE]		-- 미리 생성할 숫자(캐시)의 개수
시퀀스 사용 방법
시퀀스명.currval	현재 시퀀스 값
시퀀스명.nextval	다음 시퀀스 값

ex)	SELECT seq.nextval	FROM dual;	다음 시퀀스 값

ex)	시퀀스를 통해서 사원번호 생성하여 자동으로 부여하게만듬
INSERT INTO emp ( empno, ename
VALUES ( seq.nextval, ‘사원이름’ );
시퀀스 변경 구문 
ALTER SEQUENCE 시퀀스명
[INCREMENT BY n]		--증가값
[MAXVALUE n | NOMAXVALUE]-- 최대값
[MINVALUE n | NOMINVALUE]  -- 최소값
[CYCLE | NOCYCLE ]		--순환구조 여부
[CACHE n | NOCACHE]		-- 미리 생성할 숫자(캐시)의 개수

CREATE SEQUENCE의 START WITH 옵션 빼고 전부 변경가능
SEQUENCE의 현재 진행하는 값을 임의로 바꿀 수 없다
시퀀스 삭제
DROP SEQUENCE 시퀀스명;
시퀀스 자료사전
user_sequences

DCL, Data Control Language
데이터 제어어
권한
트랜잭션


TCL, Transaction Control Language !
COMMIT	- 트랜잭션 영구 반영
ROLLBACK	- 트랜잭션 영구 미반영


권한 구문
GRANT : 권한 부여  SQL
REVOKE : 권한 회수 SQL
권한, Privilege
DBMS객체에 대한 접근 or 해당 객체에 사용할 수 있는 SQL구문을  특정 사용자 계정에게 허가하는 것
사용자 계정마다 서로 다른 권한을 부여해 보안성을 확보한다
시스템 권한, 객체 권한이 있다
시스템 권한
DBMS 시스템 작업에 대한 권한
DBMS 객체들에 대한 접근 권한

사용자계정 생성, 변경, 삭제
DB에 대한 접속
객체 생성, 삭제
주로 관리자계정에 부여한다
객체 권한
데이터베이스 객체(테이블, 뷰, 인덱스, 프로시저, 함수 등등)에 대한 특정 작업을 수행할 수 있는 권한
객체의 소유자(Owner)는 별도의 권한 설정없이 해당 객체에 대한 모든 접근이 허용된다
테이블 객체의 객체 권한 들은 DML(SELECT, INSERT, UPDATE, DELETE) 이다
시스템 권한
대표적인 시스템 권한
CREATE SESSION : DB 접근 권한
CREATE TABLE : 테이블 생성 권한
ALTER TABLE
DROP TABLE

CREATE SEQUENCE : 시퀀스 생성
CREATE USER : 사용자 계정 생성
CREATE  VIEW : 뷰 생성
CREATE  ROLE : 롤 생성
시스템 권한 자료사전
DBA_SYS_PRIVS : 관리자계정으로 부여한 시스템 권한
USER_SYS_PRIVS : 사용자계정으로 부여한 시스템 권한

시스템 권한 부여하는 구문	
GRANT 권한종류
TO 사용자계정;
시스템 권한 회수하는 구문
REVOKE 권한종류
FROM 사용자계정;

롤, ROLE
권한들의 집합
여러개의 권한을 한번에 부여하거나 회수할 수있게 해준다
CREATE ROLE 권한이 있어야 생성할  수 있다
권한을 롤에 부여하고 ,롤을 사용자에 부여하는 방식으로 사용한다
롤을 롤에 부여하는 것도 가능하다
롤 관련 자료사전
dba_role_privs : 관리자계정으로 생성한 ROLE 자료사전
user_role_privs : 사용자계정으로 생성한 ROLE 자료사전
오라클 기본 계정
관리자 계정
SYS : 자료사전들의 소유자(Owner), dual 테이블의 소유자, DB생성 권한 있음
SYSTEM : DB생성 권한 없음

둘의 권한은 같다
DB관리하는 모든 권한을 가진 계정
사용자 계정
SCOTT : 테스트용(dummy) 데이터를 가진 사용자 계정 오라클 SQL 연습/학습 용으로 사용된다
HR : SCOTT처럼 테스트 데이터를 가지고 있는 계정

SQL  구문 종류 요약
DML, Data Manipulation Language
데이터 조작어
SELECT, INSERT, UPDATE, DELETE
데이터베이스의 데이터를 관리할 때 사용한다

DDL, Data Definition Language
데이터 정의어
CREATE, ALTER, DROP
데이터베이스의 구조(스키마) 관리할 때 사용한다

DCL, Data Control Language
데이터 제어어
GRANT, REVOKE

COMMIT, ROLLBACK
TCL, Transaction Control Language
COMMIT, ROLLBACK을 따로 분류해서 tcl이라고 부른다
개념적 설계(모델링)
E-R모델을 작성한다
요구조건을 분석하여 DBMS에 독립적인 E-R다이어그램을 작성한다
추상적인 개념을 표현한다

논리적 설계(모델링)
논리적인 자료 구조로 변환하는 과정(DBMS 의존적)
테이블을 구성요소를 설계한다
실제 물리적인 요소까지 생각하지 않는다(자료형, 저장구조 등등 )

물리적 설계(모델링)
논리적 구조로 표현된 설계 결과물을 보며 물리적 구조로 변환하는 과정
실제 DB에 저장될 구조, 경로, 인덱스, 자료형 크기, 순서 등을 결정한다
DBMS가 받게될 영향까지 고려한다

주석, Comment !!
테이블 또는 컬럼에 대한 설명을 작성하는 방법
작성된 주석은 자료사전을 이용하여 확인할 수 있다
주석 생성 구문
테이블 주석 
COMMENT ON TABLE 테이블명 IS ‘테이블 설명’;
컬럼 주석
COMMENT ON COLUMN 테이블명.컬럼명 IS ‘컬럼설명’;
주석 자료사전
user_tab_comments : 테이블 주석
user_col_comments : 컬럼 주석

데이터베이스의 대표적인 장점
데이터의 독립화
프로그램에서 데이터를 분리시킬 수 있다
프로그램 - 데이터 사이의 상호적인 영향력을 줄일 수 있다
데이터 중복 최소화, 무결성 보장
불필요한 중복을 줄여 저장 공간을 절약한다
중복을 줄여 연관된 데이터를 한 곳에 집중시켜 무결성이  
손상될 위험을 줄인다
데이터에 대한 보안성향상
		DBMS가 권한에 따라 허용된 데이터에만 접근할 수 있도록 제어한다
		데이터를 암호화하여 저장한다면 더욱 보안성이 향상된다
관리 편의성 증대
		백업/복원이 편하다
		장애가 발생 시 빠르게 복구할 수 있다
객체 권한 
대표적인 객체 권한
SELECT : 객체 조회 권한
INSERT : 삽입
UPDATE : 변경
DELETE : 삭제

GRANT : 권한부여 권한

INDEX : 인덱싱 권한

RENAME : 개체 이름 변경 권한
객체 권한 자료 사전
DBA_TAB_PRIVS : 관리자급 객체 권한
USER_TAB_PRIVS : 일반 사용자급 객체 권한
객체 권한 부여 구문
GRANT 객체권한
ON 객체
TO 사용자계정;
객체 권한 회수 구문
REVOKE 객체권한
ON 객체
FROM 사용자계정;







